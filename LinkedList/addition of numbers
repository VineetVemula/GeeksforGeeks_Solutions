Given two numbers represented by two lists, write a function that returns sum list. The sum list is list representation of addition of two input numbers.

Suppose you have two linked list 5->4 ( 4 5 )and 5->4->3( 3 4 5) you have to return  a resultant linked list 0->9->3 (3 9 0).

Input:

In this problem, method takes two argument: the head of the first and second linked list. The function should not read any input from stdin/console.
The struct Node has a data part which stores the data and a next pointer which points to the next element of the linked list. 
There are multiple test cases. For each test case, this method will be called individually.



Output:
Add  two numbers represented by linked lists./*struct Node
{
    int data;
   Node* next;
}; */
//write a function returns the resultant linked list
Node*  addTwoLists(Node* first, Node* second)
{
  struct Node *x,*s,*r,*p,*q;
  int c=0,t=0,u=0,n=0;
  p = first;
  q = second;

  while(p!=NULL&&q!=NULL)
  {
      x = (struct Node *)malloc(sizeof(Node));
      if(c==0)
      {
          r=x;
          s=r;
      }
      if(c>0)
      {
          r->next = x;
          r = x;
      }
      c++;
      n = p->data + q->data + t;
      u = n%10;
      t = n/10;
      p=p->next;
      q=q->next;
      r->data = u;
  }
  while(p!=NULL)
  {
      x = (struct Node *)malloc(sizeof(Node));
      n = p->data + t;
      u = n%10;
      t = n/10;
      p = p->next;
      r->next = x;
      r=x;
      r->data = u;
  }
  while(q!=NULL)
  {
      x = (struct Node *)malloc(sizeof(Node));
      n = q->data + t;
      u = n%10;
      t = n/10;
      q = q->next;
      r->next = x;
      r = x;
      r->data = u;
  }
  x = (struct Node * )malloc(sizeof(Node));
  x->data = t;
  r->next = x;
  return s;
}
