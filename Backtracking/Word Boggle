#include<stdio.h>
void find(char arr[][50],char board[][7],int copy[][7],int ans[],int *b,int r,int c,int d,int k)
{
    if(arr[k][d]=='.')
    {
        *b=1;
        ans[k]=1;
        return;
    }
    copy[r][c]=0;
    int i,j;
    for(i=r-1;i<=r+1;i++)
    {
        if(i>=0 && i<7)
        {
            for(j=c-1;j<=c+1;j++)
            {
                if(j>=0 && j<7)
                {
                    if(board[i][j]==arr[k][d] && copy[i][j]==1 && *b==0)
                    {
                        find(arr,board,copy,ans,b,i,j,d+1,k);
                    }
                }
            }
        }
    }
    copy[r][c]=1;
}
void swap (char arr1[],char arr2[])
{
    char temp;
    int i;
    for(i=0;i<50;i++)
    {
        if(arr1[i]=='.' && arr2[i]=='.')
            break;
        temp=arr1[i];
        arr1[i]=arr2[i];
        arr2[i]=temp;
    }
}
int main()
{
	int t=0,x=0,n=0,m=0,i=0,j=0,k=0,y=0,z=0,b1=0;
	scanf("%d",&t);
	char arr[10][50],board[7][7],charvar,sor[10][50];
	int* b;
	int copy[7][7],ans[10],rep[10];
	b=&b1;
	while(t--)
	{
	    
	    scanf("%d",&x);
	    
	    for(i=0;i<10;i++)
	    {
	        ans[i]=0;
	        rep[i]=0;
	        for(j=0;j<50;j++)
	        {
	            arr[i][j]='.';
	            sor[i][j]='.';
	        }
	    }
	    for(i=0;i<7;i++)
	    {
	        for(j=0;j<7;j++)
	        {
	            board[i][j]='.';
	            copy[i][j]=0;
	        }
	    }
	    for(i=0;i<x;i++)
	    {
	        j=0;
	        charvar=getchar();
	        
	        while(charvar==' ' || charvar == '\n')
	        {
	            charvar=getchar();
	        }
	        
	        while(charvar!=' ' && charvar != '\n')
	        {
	            arr[i][j++]=charvar;
	            charvar=getchar();
	        }
	    }
	    
	    scanf("%d %d",&m,&n);
	    for(i=0;i<m;i++)
	    {
	        for(j=0;j<n;j++)
	        {
	            charvar=getchar();
	            while(charvar==' ' || charvar == '\n')
	            {
	                charvar=getchar();
	            } 
	            board[i][j]=charvar;
	        }
	    }
	    
	    // PRINTING STUFF
	    /*for(i=0;i<10;i++)
	    {
	        for(j=0;j<10;j++)
	        {
	            printf("%c ",arr[i][j]);
	        }
	        printf("\n");
	    }
	    for(i=0;i<7;i++)
	    {
	        for(j=0;j<7;j++)
	        {
	            printf("%c ",board[i][j]);
	        }
	        printf("\n");
	    }*/
	    // DONE PRINTING
	    
	    for(k=0;k<x;k++)
	    {
	        charvar=arr[k][0];
	        (*b) = 0;
	        for(i=0;i<m;i++)
	        {
	            for(j=0;j<n;j++)
	            {
	                if((*b)==1)
	                    break;
	                for(y=0;y<m;y++)
	                {
	                    for(z=0;z<n;z++)
	                    {
	                        copy[y][z]=1;
	                    }
	                }
	                if(board[i][j]==charvar)
	                {
	                    find(arr,board,copy,ans,b,i,j,1,k);
	                }
	            }
	            if((*b)==1)
	                break;
	        }
	    }
	    if(x==6 && m==2 && n==5 && board[0][0]=='e')
	    {
	    for(i=0;i<10;i++)
	    {
	        //printf("%d ",ans[i]);
	    }
	    }
	    //SORTING OUTPUT
	    j=0;
	    for(i=0;i<10;i++)
	    {
	        for(z=0;z<50;z++)
	        {
	            sor[i][z]='.';
	        }
	    }
	    for(i=0;i<10;i++)
	    {
	        if(ans[i]==1)
	        {
	            for(k=0;k<50;k++)
	            {
	                sor[j][k]=arr[i][k];
	            }
	            j++;
	        }
	    }
	    //PRINTING SOR
	    /*for(i=0;i<10;i++)
	    {
	        for(z=0;z<10;z++)
	        {
	            printf("%c ",sor[i][z]);
	        }
	        printf("\n");
	    }*/
	    //done printing sor
	    if(j==0)
	    {
	        printf("-1\n");
	        continue;
	    }
	    for(y=0;y<j-1;y++)
	    {
	        for(k=0;k<j-1;k++)
	        {
	            z=0;
	            if(sor[k][z]>sor[k+1][z])
	            {
	                swap(sor[k],sor[k+1]);
	            }
	            else if(sor[k][z]==sor[k+1][z])
	            {
	                while(z<50 && sor[k][z]==sor[k+1][z])
	                {
	                    z++;
	                }
	                
	                if(sor[k][z]>sor[k+1][z])
	                {
	                    swap(sor[k],sor[k+1]);
	                }
	            }
	        }
	    }
	    for(k=0;k<j-1;k++)
	        {
	            z=0;
	            if(sor[k][z]==sor[k+1][z])
	            {
	                while(z<50 && sor[k][z]==sor[k+1][z])
	                {
	                    z++;
	                }
	                if(z==50)
	                {
	                    rep[k+1]=1;
	                }
	            }
	        }
	    for(i=0;i<j;i++)
	    {
	        k=0;
	        if(rep[i]==0)
	        {
	            while(sor[i][k]!='.')
	            {
	                printf("%c",sor[i][k]);
	                k++;
	            }
	            printf(" ");
	        }
	    }
	    printf("\n");
	    for(i=0;i<10;i++)
	    {
	        rep[i]=0;
	    }
	}
	return -1;
}
